# list your transforms or just "trn" for the as is training set
# and remember to build any transformed sets with custom code
# to avoid building unecesary duplicates
sets <- c("trn", "pca")
# set up the models matrix
models <- createModelMatrix(algorithms, sets)
# set up the train controls for each model
# to customise for any model, over-write the default
tCtrls <- list()
for (algo in algorithms) {
tCtrls[[algo]] <- trainControl(method = "cv", number = 5, allowParallel = TRUE)
}
createModels(trn.val.tst, dt$resp, models, tCtrls)
lda_pca_model
lda_trn_model
qda_trn_model
qda_set_model
qda_pcs_model
qda_pca_model
plot(trn.val.tst$val, predict(qda_trn_model, trn.val.tst$val)
)
confusionMatrix(trn.val.tst$val$cut, predict(qda_trn_model, trn.val.tst$val)
)
library(vcd)
library(vcdExtra)
ds <- datasets(package = c("vcd", "vcdExtra"))
str(ds)
install.packages("vcd")
install.packages("vcdExtra")
library(vcd)
library(vcdExtra)
ds <- datasets(package = c("vcd", "vcdExtra"))
str(ds)
with(ds, table(Package, class))
(art <- xtabs(~ Treatment + Improved
, data = Arthritis
, subset = Sex == "Female"))
mosaic(art, gp = shading_Friendly)
mosaic(art, gp = shading_max)
structable(~., data = BrokenMarriage)
(art <- xtabs(~ Treatment + Improved
, data = Arthritis
, subset = Sex == "Female"))
type(art)
class(art)
structable(~., data = BrokenMarriage)
data("Bundesliga")
## number of goals per game poisson distributed?
(ngoals1 <- xtabs(~ HomeGoals, data = Bundesliga, subset = Year == 1995))
plot(ngoals1)
(ngoals2 <- xtabs(~ AwayGoals, data = Bundesliga, subset = Year == 1995))
plot(ngoals2)
(ngoals3 <- table(apply(subset(Bundesliga, Year == 1995)[,3:4], 1, sum)))
plot(ngoals3)
(gf1 <- goodfit(ngoals1))
summary(gf1)
plot(gf1)
(gf2 <- goodfit(ngoals2))
summary(gf2)
plot(gf2)
(gf3 <- goodfit(ngoals3))
summary(gf3)
plot(gf3)
Ord_plot(ngoals1)
distplot(ngoals1)
ngoals1
ngoals2
ngoals3
Ord_plot(ngoals2)
distplot(ngoals2)
Ord_plot(ngoals3)
distplot(ngoals3)
learnAbout("Abortion")
learnAbout("Caesar")
learnAbout <- function(d) {
data(list = d)
str(get(d))
help(topic = d)
}
learnAbout("Abortion")
learnAbout("Caesar")
learnAbout("DaytonSurvey")
mod.GR <- glm(Freq ~ . + sex*race, data=DaytonSurvey, family=poisson)  # mutual independence + GR
mod.homog.assoc <- glm(Freq ~ .^2, data=DaytonSurvey, family=poisson)  # homogeneous association
Dayton.ACM <- aggregate(Freq ~ cigarette+alcohol+marijuana, data=DaytonSurvey, FUN=sum)
learnAbout("Hoyt")
structable(Status+Sex ~ Rank+Occupation, data=Hoyt) # needs wide display
Hoyt1 <- collapse.table(Hoyt, Status=c("College", rep("Non-College",3)))
plot(Hoyt1, shade=TRUE)
data("UCBAdmissions")
sum(UCBAdmissions)
margin.table(UCBAdmissions)
margin.table(UCBAdmissions, 1)
margin.table(UCBAdmissions, 2)
margin.table(UCBAdmissions, 3)
margin.table(UCBAdmissions, c(1, 3))["Admitted",]
prop.table(UCBAdmissions, 2)
myTab <- structable(Gender~Admit+Dept, UCBAdmissions)
prop.table(structable(Gender~Dept, UCBAdmissions))
tot.dept <- structable(Gender~Dept, margin.table(UCBAdmissions, c(2,3)))
app.dept <- structable(Gender~Admit+Dept, UCBAdmissions)["Admitted"]
prop.dept <- app.dept/tot.dept
# klaps down to fewer dims
UBB.tab2 <- as.matrix(structable(Dept~Admit+Gender, UCBAdmissions), sep = ":")
learnAbout("DanishWelfare")
with(DanishWelfare, sum(Freq))
# this works because they're in order
DanishWelfare$Alcohol <- ordered(DanishWelfare$Alcohol)
DanishWelfare$Income <- ordered(DanishWelfare$Income)
DanishWelfare.tab <- xtabs(Freq~., data = DanishWelfare)
margin.table(DanishWelfare.tab, 4)
# fewer urban vars
DanishWelfare.clps <- collapse.table(DanishWelfare.tab
, Urban = c("City", "Not City"
, "City", "City"
, "Not City"))
ftable(Alcohol~Urban+Income+Status, DanishWelfare.clps)
structable(Alcohol+Urban~Income+Status, DanishWelfare.clps)
learnAbout("UKSoccer")
margin.table(UKSoccer)
addmargins(UKSoccer)
mosaic(UKSoccer, gp = shading_max, main = "UK Soccer Scores")
totgoals <- matrix(nrow = 5, ncol = 2)
for (i in 1:2) {
print(margin.table(UKSoccer, i))
totgoals[,i] <- as.numeric(dimnames(UKSoccer)[[i]]) * margin.table(UKSoccer, i)
}
totgoals
sum(totgoals[,1])
sum(totgoals[,2])
library(lattice)
xyplot(totgoals[,1]+totgoals[,2]~0:4, type = "l")
plot(totgoals[,1], type = "l")
lines(totgoals[,2], type = "l", col = "blue")
learnAbout("Saxony")
learnAbout("Geissler")
gf <- goodfit(Saxony, type = "binomial")
gf
summary(gf)
plot(gf)
Saxony12<-subset(Geissler, size==12, select=c(boys, Freq))
rownames(Saxony12) <- NULL
xtabs(Freq~boys, Saxony12)
learnAbout("VisualAcuity")
xtabs(Freq~left+right+gender, VisualAcuity)
structable(~ gender + left + right, data = VisualAcuity)
sieve(Freq ~ left + right | gender, data = VisualAcuity, shade = TRUE)
cotabplot(Freq ~ left + right | gender, data = VisualAcuity,
panel = cotab_agreementplot)
library(vcd)
library(vcdExtra)
# distributions
set.seed(12345)
k <- 0:12
Pk <- dbinom(k, 12, 1/3)
b <- barplot(Pk, names.arg = k
, xlab = "number of successes"
, ylab = "probability")
lines(x = b, y = Pk, col = "red")
Weldon_df <- as.data.frame(WeldonDice)
# collapse last three cols of simulated set
Pk <- c(Pk[1:10], sum(Pk[11:13]))
Exp <- round(26306 * Pk, 5) # expected
Diff <- Weldon_df$Freq - Exp
Chisq <- Diff^2/Exp
data.frame(Weldon_df, prob = round(Pk, 5), Exp, Diff, Chisq)
b2 <- barplot(Weldon_df$Freq)
lines(x = b2, y = Exp, col = "red")
p <- c(1/6, 1/3, 1/2, 2/3)
k <- 0:12
Prob <- outer(k, p, function(k,p) { dbinom(k, 12, p) })
str(Prob)
col <- palette()[2:5]
matplot(k, Prob, type = "o", pch = 15:17, col = col
, xlab = "number of Successes", ylab = "Probability")
legend("topright", legend = as.character(p), pch = 15:17
, lty = 1, col = col, title = "Pr(Success")
data("UKSoccer", package = "vcd")
soccer.df <- as.data.frame(UKSoccer, stringsAsFactors = FALSE)
soccer.df <- within(soccer.df, {
Home <- as.numeric(Home)       # make numeric
Away <- as.numeric(Away)       # make numeric
Total <- Home + Away           # total goals
})
str(soccer.df)
soccer.df <- expand.dft(soccer.df)   # expand to ungrouped form
apply(soccer.df, 2, FUN = function(x) c(mean = mean(x), var = var(x)))
with(CyclingDeaths, c(mean = mean(deaths),
var = var(deaths),
ratio = mean(deaths) / var(deaths)))
mean.deaths <- mean(CyclingDeaths$deaths)
ppois(5, mean.deaths, lower.tail = FALSE)
KL <- expand.grid(k = 0 : 20, lambda = c(1, 3, 7, 10, 15, 20))
pois_df <- data.frame(KL, prob = dpois(KL$k, KL$lambda))
pois_df$lambda = factor(pois_df$lambda)
str(pois_df)
library(lattice)
library(directlabels)
install.packages("directlabels")
library(directlabels)
xyplot(prob ~ k | lambda, data = pois_df,
type = c("h", "p"), pch = 16, lwd = 2, cex = 1.25, layout = c(3, 2),
xlab = list("Number of events (k)", cex = 1.25),
ylab = list("Probability", cex = 1.25))
# use direct labels as an alternative way to legend a plot (lattice)
mycol <- palette()[2:7]
plt <- xyplot(prob ~ k, data = pois_df, groups = lambda,
type = "b", pch = 15 : 17, lwd = 2, cex = 1.25, col = mycol,
xlab = list("Number of events (k)", cex = 1.25),
ylab = list("Probability",  cex = 1.25),
ylim = c(0, 0.4))
library(directlabels)
direct.label(plt, list("top.points", cex = 1.5, dl.trans(y = y + 0.1)))
# ggplot alternative
library(ggplot2)
gplt <- ggplot(pois_df,
aes(x = k, y = prob, colour = lambda, shape = lambda)) +
geom_line(size = 1) + geom_point(size = 3) +
xlab("Number of events (k)") +
ylab("Probability")
gplt + theme(legend.position = c(0.9, 0.7)) +  # manually move legend
theme(axis.text = element_text(size = 12),
axis.title = element_text(size = 14, face = "bold"))
# negative binom
k <- 2
n <- 2 : 4
p <- 0.2
dnbinom(k, n, p)
(mu <- n * (1 - p) / p)
dnbinom(k, n, mu = mu)
XN <- expand.grid(k = 0 : 20, n = c(2, 4, 6), p = c(0.2, 0.3, 0.4))
nbin_df <- data.frame(XN, prob = dnbinom(XN$k, XN$n, XN$p))
nbin_df$n <- factor(nbin_df$n)
nbin_df$p <- factor(nbin_df$p)
str(nbin_df)
xyplot(prob ~ k | n + p, data = nbin_df,
xlab = list("Number of failures (k)", cex = 1.25),
ylab = list("Probability",  cex = 1.25),
type = c("h", "p"), pch = 16, lwd = 2,
strip = strip.custom(strip.names = TRUE)
)
# goodness-of-fit test
tab <- as.data.frame(HorseKicks, stringsAsFactors = FALSE)
colnames(tab) <- c("nDeaths", "Freq")
str(tab)
(lambda <- weighted.mean(as.numeric(tab$nDeaths), w = tab$Freq))
phat <- dpois(0 : 4, lambda = lambda)
exp <- sum(tab$Freq) * phat
chisq <- (tab$Freq - exp)^2 / exp
GOF <- data.frame(tab, phat, exp, chisq)
GOF
sum(chisq)  # chi-square value
pchisq(sum(chisq), df = nrow(tab) - 2, lower.tail = FALSE)
# sax.fit
data("Saxony", package = "vcd")
Sax_fit <- goodfit(Saxony, type = "binomial")
unlist(Sax_fit$par) # estimated parameters
names(Sax_fit)     # components of "goodfit" objects
Sax_fit            # print method
summary(Sax_fit)   # summary method
# Fed and plots
data("Federalist", package = "vcd")
Fed_fit0 <- goodfit(Federalist, type = "poisson")
unlist(Fed_fit0$par)
Fed_fit0
summary(Fed_fit0)
Fed_fit1 <- goodfit(Federalist, type = "nbinomial")
unlist(Fed_fit1$par)
summary(Fed_fit1)
plot(Fed_fit0, scale = "raw", type = "standing")
plot(Fed_fit0, type = "standing")
plot(Fed_fit0, type = "hanging", shade = TRUE)
plot(Fed_fit0, type = "deviation", shade = TRUE)
plot(Fed_fit1, scale = "raw", type = "standing")
plot(Fed_fit1, type = "standing")
plot(Fed_fit1, type = "hanging", shade = TRUE)
plot(Fed_fit1, type = "deviation", shade = TRUE)
# atrocious fits on butterfly
data("Butterfly", package = "vcd")
But_fit1 <- goodfit(Butterfly, type = "poisson")
But_fit2 <- goodfit(Butterfly, type = "nbinomial")
plot(But_fit1, main = "Poisson", shade = TRUE, legend = FALSE)
plot(But_fit2, main = "Negative binomial", shade = TRUE, legend = FALSE)
# ord plots
ord <- Ord_plot(Butterfly,
main = "Butterfly species collected in Malaya",
gp = gpar(cex = 1), pch = 16)
ord
data("HorseKicks", package = "vcd")
nk <- as.vector(HorseKicks)
k <- as.numeric(names(HorseKicks))
nk1 <- c(NA, nk[-length(nk)])
y <- k * nk / nk1
weight <- sqrt(pmax(nk, 1) - 1)
(ord_df <- data.frame(k, nk, nk1, y, weight))
coef(lm(y ~ k, weights = weight, data = ord_df))
Ord_plot(Federalist, main = "Instances of 'may' in Federalist Papers",
gp = gpar(cex = 1), pch = 16)
Ord_plot(WomenQueue, main = "Women in queues of length 10",
gp=gpar(cex=1), pch=16)
data("HorseKicks", package = "vcd")
dp <- distplot(HorseKicks, type = "poisson",
xlab = "Number of deaths"
, main = "Poissonness plot: HorseKicks data")
print(dp, digits = 4)
# leveled version, specifying lambda
distplot(HorseKicks, type = "poisson", lambda = 0.61,
xlab = "Number of deaths"
, main = "Leveled Poissonness plot")
plot(goodfit(Saxony, type = "binomial"
, par = list(size=12)),
shade=TRUE, legend=FALSE,
xlab = "Number of males")
distplot(Saxony, type = "binomial", size = 12,
xlab = "Number of males")
distplot(Federalist, type = "poisson"
, xlab = "Occurrences of 'may'")
distplot(Federalist, type = "nbinomial"
, xlab = "Occurrences of 'may'")
install.packages("HistData")
library(vcd)
library(vcdExtra)
library(extracat)
installed.packages("extracat")
install.packages("extracat")
library(extracat)
library(MASS)
hec <- margin.table(HairEyeColor, 2:1)
tile(hec)
fluctile(hec)
data("Mental", package = "vcdExtra")
mental <- xtabs(Freq ~ ses + mental, data = Mental)
spineplot(mental)
fluctile(mental)
Berkeley <- margin.table(UCBAdmissions, 2:1)
library(gmodels)
CrossTable(Berkeley, prop.chisq = FALSE, prop.c = FALSE,
format = "SPSS")
install.packages("gmodels")
Berkeley <- margin.table(UCBAdmissions, 2:1)
CrossTable(Berkeley, prop.chisq = FALSE, prop.c = FALSE,
format = "SPSS")
library(vcd)
library(vcdExtra)
library(extracat)
library(MASS)
library(gmodels)
hec <- margin.table(HairEyeColor, 2:1)
CrossTable(Berkeley, prop.chisq = FALSE, prop.c = FALSE,
format = "SPSS")
p <- c(0.05, .1, .25, .50, .75, .9, .95)
odds <- p / (1 - p)
logodds <- log(odds)
logits <- data.frame(p, odds, logodds)
logits
data("UCBAdmissions")
UCB <- margin.table(UCBAdmissions, 1:2)
(LOR <- loddsratio(UCB))
(OR <- loddsratio(UCB, log = FALSE))
summary(LOR)
confint(LOR)
confint(OR)
fisher.test(UCB)
data("Arthritis", package = "vcd")
Art <- xtabs(~ Treatment + Improved, data = Arthritis)
Art
round(100 * prop.table(Art, margin = 1), 2)
assocstats(Art)
Art2 <- xtabs(~ Treatment + Improved + Sex, data = Arthritis)
Art2
assocstats(Art2)
CMHtest(Art2)
# the test was more significant for female
# because of the greater number of female in the data
apply(Art2, 3, sum)
data("Mental", package = "vcdExtra")
mental <- xtabs(Freq ~ ses + mental, data = Mental)
assocstats(mental)    # standard chisq tests
CMHtest(mental)       # CMH tests
# general association
cmhdemo1 <- read.table(header=TRUE, sep="", text="
b1  b2   b3  b4  b5
a1    0  15   25  15   0
a2    5  20    5  20   5
a3   20   5    5   5  20
")
cmhdemo1 <- as.matrix(cmhdemo1)
# linear association
cmhdemo2 <- read.table(header=TRUE, sep="", text="
b1  b2   b3  b4  b5
a1    2   5    8   8   8
a2    2   8    8   8   5
a3    5   8    8   8   2
a4    8   8    8   5   2
")
cmhdemo2 <- as.matrix(cmhdemo2)
CMHtest(cmhdemo1)
CMHtest(cmhdemo2)
sieve(cmhdemo1, shade=TRUE, main="General association",
gp = shading_sieve(interpolate = 0, lty = c("solid", "longdash")))
sieve(cmhdemo2, shade=TRUE, main="Linear association",
gp = shading_sieve(interpolate = 0, lty = c("solid", "longdash")))
# for 2x2xk tables, determine if the odds ratios differ across the strata
woolf_test(UCBAdmissions)
woolf_test(Art2)
# the loglinear model agrees with the woolf test on the art data
loglm(~ (Treatment + Improved + Sex)^2, data = Art2)
loglm(~ (Gender + Admit + Dept)^2, data = UCBAdmissions)
fourfold(Berkeley, std = "ind.max")   # unstandardized
fourfold(Berkeley, margin = 1)        # equating gender
fourfold(Berkeley)  # standardize both margins
summary(loddsratio(Berkeley))
exp(.6103 + c(-1, 1) * qnorm(.975) * 0.06398)
confint(loddsratio(Berkeley, log = FALSE))
UCB <- aperm(UCBAdmissions, c(2, 1, 3))
fourfold(UCB, mfrow = c(2, 3))
data("CoalMiners", package = "vcd")
CM <- CoalMiners[, , 2 : 9]
structable(. ~ Age, data = CM)
fourfold(CM, mfcol = c(2, 4))
loddsratio(CM)
loddsratio(CM, log = FALSE)
lor_CM <- loddsratio(CM)
plot(lor_CM, bars=FALSE, baseline=FALSE, whiskers=.2)
lor_CM_df <- as.data.frame(lor_CM)
age <- seq(25, 60, by = 5) + 2
lmod <- lm(LOR ~ poly(age, 2), weights = 1 / ASE^2, data = lor_CM_df)
grid.lines(seq_along(age), fitted(lmod),
gp = gpar(col = "red", lwd = 2), default.units = "native")
summary(lmod)
haireye <- margin.table(HairEyeColor, 1:2)
expected = independence_table(haireye)
round(expected, 1)
sieve(haireye, shade=TRUE, sievetype="expected",
main="Expected frequencies")
sieve(haireye, shade=TRUE,
main="Observed frequencies")
sieve(haireye, sievetype = "expected", shade = TRUE,
main="Expected frequencies",
labeling = labeling_values, value_type = "expected",
gp_text = gpar(fontface = 2), gp = shading_sieve(interpolate = 0, line_col="darkgrey",eps=Inf,lty="dashed"))
sieve(haireye, shade = TRUE, main="Observed frequencies",
labeling = labeling_values, value_type = "observed",
gp_text = gpar(fontface = 2))
data("VisualAcuity", package = "vcd")
VA <- xtabs(Freq ~ right + left + gender, data = VisualAcuity)
dimnames(VA)[1:2] <- list(c("high", 2, 3, "low"))
names(dimnames(VA))[1:2] <- paste(c("Right", "Left"), "eye grade")
structable(aperm(VA))
sieve(VA[, , "female"], shade = TRUE)
sieve(Freq ~ right + left | gender, data = VisualAcuity,
shade = TRUE, set_varnames = c(right = "Right eye grade",
left = "Left eye grade"))
cotabplot(VA, cond = "gender", panel = cotab_sieve, shade = TRUE)
sieve(UCBAdmissions, shade = TRUE, condvar = 'Gender')
sieve(~ Dept + Admit + Gender, data = UCBAdmissions,
shade = TRUE, labeling = labeling_values,
gp_text = gpar(fontface = 2), abbreviate_labs = c(Gender = TRUE))
cotabplot(UCBAdmissions, cond = "Gender", panel = cotab_sieve,
shade = TRUE)
cotabplot(UCBAdmissions, cond = "Dept", panel = cotab_sieve,
shade = TRUE, labeling = labeling_values,
gp_text = gpar(fontface = "bold"))
UCB2 <- aperm(UCBAdmissions, c(3, 2, 1))
sieve(UCB2, shade = TRUE
, expected = ~ Admit * Gender + Dept
, split_vertical = c(FALSE, TRUE, TRUE))
assoc(~ Hair + Eye, data = HairEyeColor, shade = TRUE, gp_axis = gpar(lty = 5))
assoc(HairEyeColor, shade = TRUE, gp_axis = gpar(lty = 5))
data("SexualFun", package = "vcd")
SexualFun
MSPatients[, , "Winnipeg"]
MSPatients[, , "New Orleans"]
apply(MSPatients, 3, sum)      # show sample sizes
Kappa(SexualFun)
confint(Kappa(SexualFun))
oldpar <- par()
op <- par(mar=c(4,3,4,1)+.1)
agreementplot(SexualFun, main = "Unweighted", weights = 1)
agreementplot(SexualFun, main = "Weighted")
par(op)
B <- agreementplot(SexualFun)
unlist(B)[1 : 2]
op <- par(mar = c(4, 3, 4, 1) + .1)
data("Mammograms", package = "vcdExtra")
B <- agreementplot(Mammograms, main = "Mammogram ratings")
par(op)
unlist(B)[1 : 2]
cotabplot(MSPatients, cond = "Patients", panel = cotab_agreementplot,
text_gp = gpar(fontsize = 18), xlab_rot=20)
agr1 <- agreementplot(MSPatients[, , "Winnipeg"])
agr2 <- agreementplot(MSPatients[, , "New Orleans"])
rbind(Winnipeg = unlist(agr1), NewOrleans = unlist(agr2))[, 1 : 2]
install.packages("ggtern")
library(ggtern)
DATA <- data.frame(
A = c(40, 20, 10),
B = c(30, 60, 10),
C = c(30, 20, 80),
id = c("1", "2", "3"))
ggtern(data = DATA,
mapping = aes(x=C, y=A, z=B, colour = id)) +
geom_point(size=4) +
geom_text(vjust=-.5, size=8, aes(label=id)) +
theme_rgbw() +
theme(plot.margin=unit(c(0,0,0,0),"mm"))
library(ggtern)
install.packages("ggtern")
install.packages("ggtern")
install.packages("ggtern")
library(ggtern)
library(ggplot2)
